::BEGIN:MAIN
# #Feecting

talk:#docs view algos/indramind:data

::begin:hidden
#color = ::agent_color::
#bgcolor = ::agent_bgcolor::
#bg = ::agent_background::
::end:hidden
::END:MAIN

::BEGIN:DATA
const: #feecting = Functional Expressive Emergent Cognitive Technical Intelligent Neural Generator. #feecting is a line label key value pair modular containerized procedural dynamic function method module event keywrod driven programming language.

## Examples
Below are a few examples of the #feecting language to work from.

### Variables
var: #test = memory variables are with "var".
set: Test = temporary variables are with "set".
const: test = constant variables are done with "const"

### Structures
// Arrays
array: theArray [
  "array item 1",
  "array item 2",
  0,
]
// Objects
object: theObject {
    test: value here...
}

friends: #test is one we look to for mememory.
friends: Test is one we look to for temporary.
friends: test is one we look to for constants.

### Control Logic
if: condition (==|!=|<<|>>) expectation
elseif: secondary (is|not|equals) expectation
else: the conditional
finally: when everything is done.


switch: condition {
  case: value
  case: value
  default: value then we do this first Quinn
}

---

### Iteration
// for iteration loop arrays and lists
for: x in [array|list]

example: Below is an exmaple of looping over the friends label which is also automatically converted into an array.
for: x in friends
 write: friends[x];
 then: log to the friends.add 
 finally: friends.notify Greetings friends just sending an example of some #feecting features.
 
for: x of object

// While iteration loop
set: x = true
while: x eq true
  if: x == 10
    set: x = false

### Error Control
try: a block of code to execute
catch: type of exception to catch. ie: Any, Socket, Etc.
finally: after try/catch completes

---
::END:DATA
=



Sheryl Sandberg
